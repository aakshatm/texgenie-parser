[
  {
    "type": "heading",
    "attrs": {
      "level": 1
    },
    "style": "atx",
    "children": [
      {
        "type": "text",
        "raw": "Vision Transformers for Single Image Dehazing"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "Yuda Song, Zhuqing He, Hui Qian, and Xin Du."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "Abstract\u2014Image dehazing is a representative low-level vision task that estimates latent haze-free images from hazy images. In recent years, convolutional neural network-based methods have dominated image dehazing. However, vision Transformers, which has recently made a breakthrough in high-level vision tasks, has not brought new dimensions to image dehazing. We start with the popular Swin Transformer and find that several of its key designs are unsuitable for image dehazing. To this end, we propose DehazeFormer, which consists of various improvements, such as the modified normalization layer, activation function, and spatial information aggregation scheme. We train multiple variants of DehazeFormer on various datasets to demonstrate its effectiveness. Specifically, on the most frequently used SOTS indoor set, our small model outperforms FFA-Net with only $25"
      },
      {
        "type": "text",
        "raw": "%"
      },
      {
        "type": "text",
        "raw": "$ #Param and $5"
      },
      {
        "type": "text",
        "raw": "%"
      },
      {
        "type": "text",
        "raw": "$ computational cost. To the best of our knowledge, our large model is the first method with the PSNR over 40 dB on the SOTS indoor set, dramatically outperforming the previous stateof-the-art methods. We also collect a large-scale realistic remote sensing dehazing dataset for evaluating the method\u2019s capability to remove highly non-homogeneous haze. We share our code and dataset at https://github.com/IDKiro/DehazeFormer."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "Index Terms\u2014Image Processing, Image Dehazing, Deep Learning, Vision Transformer."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "heading",
    "attrs": {
      "level": 2
    },
    "style": "atx",
    "children": [
      {
        "type": "text",
        "raw": "I. INTRODUCTION"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "H iAmZpEa risda cyolimfemaondatmacohsipnhe rviic pohnesnyostmemnso.nTtheatprceasnence of haze reduces the scene\u2019s visibility and affects people\u2019s judgment of the object, and thick haze can even affect traffic safety. For computer vision, haze degrades the quality of the captured image in most cases. It can impact the model\u2019s reliability in high-level vision tasks, further mislead machine systems, such as autonomous driving. All these make image dehazing a meaningful low-level vision task."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "Image dehazing aims to estimate the latent haze-free image from the observed hazy image. For the single image dehazing problem, there is a popular model "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "1\u20133] to characterize the degradation process for hazy images:"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "$$"
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "I=J(x)t(x)+A(1-t(x)),"
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "$$"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "where $I$ is the captured hazy image, $J$ is the latent haze-free image, $A$ is the global atmospheric light, and $t$ is the medium transmission map. And the transmission can be expressed as"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "$$"
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "t(x)=e^{-\\beta d(x)},"
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "$$"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "where $\\beta$ is the scattering coefficient of the atmosphere, and $d$ is the scene depth. As can be seen, image dehazing is a typically"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "Manuscript received XXXX 00, 0000; accepted XXXX 00, 0000. Date of publication XXXX 00, 0000; date of current version XXXX 00, 0000. The associate editor coordinating the review of this manuscript and approving it for publication was XXXX. (Yuda Song and Zhuqing He contributed equally to this work.) (Corresponding authors: Xin Du.)"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "Yuda Song, Zhuqing He, Hui Qian, and Xin Du are with Zhejiang University, Hangzhou 310027, China (e-mail: duxin $@$ zju.edu.cn)"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "image",
        "children": [
          {
            "type": "text",
            "raw": ""
          }
        ],
        "attrs": {
          "url": "images/4c64a0301d4d5beaad47edae59e9ed5e6b8d652d8c4aca235968b5102ba905d0.jpg"
        }
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "Fig. 1. Comparison of DehazeFormer with other image dehazing methods on the SOTS indoor set. The size of the dots indicates the #Param of the method, and MACs are shown with logarithmic axis."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "ill-posed problem, and early image dehazing methods tend to constrain the solution space with priors "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "4\u20137]. They generally estimate $A$ and $t(x)$ separately to lower the complexity of the problem and then use Eq.(1) to derive the results. These prior-based methods can produce images with good visibility. However, these images are often visibly different from hazefree images, and artifacts may be introduced in regions that do not satisfy the priors."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "In recent years, deep learning has made a big hit in computer vision, and researchers have proposed a large number of image dehazing methods based on deep convolutional neural networks (CNNs) "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "8\u201321]. With a sufficient number of synthetic image pairs, these methods can achieve superior performance over prior-based methods. Earlier CNN-based methods "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "8\u201310] also estimate $A$ and $t(x)$ separately, where $t(x)$ is supervised using the transmission map used in synthesizing the dataset. And current methods "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "13\u201320] prefer to predict the latent hazefree image or the residuals of the haze-free image versus the hazy image since it tends to achieve better performance. Very recently, ViT "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "22] outperformed almost all CNN architectures in high-level vision tasks using plain Transformer architecture. Subsequently, many modified architectures "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "23\u201340] have been proposed, and vision Transformer is challenging the dominance of CNNs in high-level vision tasks. So many works have demonstrated the effectiveness of vision Transformers, but there is still no Transformer-based image dehazing method that defeats the state-of-the-art image dehazing networks. In this work, we propose an image dehazing Transformer dubbed DehazeFormer, which is inspired by Swin Transformer "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "30]. It dramatically surpasses these CNN-based methods."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "We find that the LayerNorm "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "41] and GELU "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "42] commonly used in vision Transformers harm the image dehazing performance. Specifically, the LayerNorm used in vision Transformer normalizes the tokens corresponding to the image patches separately, resulting in the loss of the relativity between the patches. Hence, we remove the normalization layer preceded by the multi-layer perceptron (MLP) and propose RescaleNorm to replace LayerNorm. RescaleNorm performs normalization on the entire feature map and reintroduces the mean and variance of the feature map lost after normalization. Besides, SiLU / Swish "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "43] and GELU work well in high-level vision tasks, but ReLU "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "44] works better than them in image dehazing. We believe this is because the nonlinearities they introduce are not easily inverted when decoding. We argue that image dehazing requires not only that the network encodes highly expressive features but also that these features are easily recovered to image domain signals."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "Swin Transformer uses window partitioning with cyclic shift to efficiently aggregate local features. But we find that the cyclic shift is suboptimal for image edge regions in image dehazing. Specifically, the cyclic shift should use masked multihead self-attention (MHSA) to prevent unreasonable spatial aggregation, making the windows in the edge regions smaller. We consider that aggregating information within a small window brings instability, which can bias the network\u2019s training. Thus we propose a shifted window partitioning scheme based on reflection padding and cropping, which allows MHSA to discard the mask and achieve a constant window size. We also find that the aggregation weights of MHSA are always positive, which makes it behave like a low-pass filter "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "29]. Because the aggregation weights of MHSA are dynamic, allpositive, and normalized, we believe that static, learnable, and unconstrained aggregation weights are helpful to complement the MHSA, while the convolution meets this criterion."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "Furthermore, we propose a prior-based soft reconstruction module that outperforms global residual learning and a multiscale feature map fusion module based on SKNet "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "45] to replace concatenation fusion. Finally, we build multiple U-Netlike image dehazing Transformers using the proposed modules. Our experiments show that DehazeFormer can substantially outperform contemporaneous methods with lower overhead. Fig. 1 shows the comparison of DehazeFormer with other image dehazing methods on the SOTS indoor set. Our small model defeats the FFA-Net "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "18] with only $25"
      },
      {
        "type": "text",
        "raw": "%"
      },
      {
        "type": "text",
        "raw": "$ #Param and $5"
      },
      {
        "type": "text",
        "raw": "%"
      },
      {
        "type": "text",
        "raw": "$ computational cost. Our base model is lower in overhead but better in performance than the previous state-of-the-art method, AECR-Net "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "19]. To the best of our knowledge, our large model is the first method over $40\\ \\mathrm{dB}$ , substantially outperforming contemporaneous methods."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "There are non-homogeneous image dehazing datasets collected using professional haze machines "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "46], but they are too small and far from the non-homogeneous haze that would be present in natural scenes. Instead, we tend to collect remote sensing image dehazing datasets since highly nonhomogeneous haze is prevalent in remote sensing images. We take into account the wavelength, etc., on the spatial distribution of the haze and then synthesize a large-scale realistic remote sensing image dehazing dataset."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "heading",
    "attrs": {
      "level": 2
    },
    "style": "atx",
    "children": [
      {
        "type": "text",
        "raw": "II. RELATED WORKS"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "heading",
    "attrs": {
      "level": 3
    },
    "style": "atx",
    "children": [
      {
        "type": "text",
        "raw": "A. Image Dehazing"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "Early single-image dehazing methods were generally based on the handcraft priors, such as dark channel prior (DCP) "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "4], color attenuation prior (CAP) "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "6], color-lines "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "5], and hazelines "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "7]. These prior-based methods usually yield images with good visibility. However, because these priors are based on empirical statistics, these dehazing methods tend to output unrealistic results when the scenes do not satisfy these priors. With the rapid development of deep learning, learningbased dehazing methods have dominated in recent years. DehazeNet "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "8] and MSCNN "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "9] are the pioneers in applying CNNs for image dehazing. They learn to estimate $t$ and obtain the result together with $A$ estimated by the conventional method. After that, DCPDN "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "10] uses two sub-networks to estimate $t$ and $A$ respectively, while GFN "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "12] estimates the fusion coefficient maps for the three predefined image operations. AOD-Net "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "11], on the other hand, rewrites Eq.(1) so that the network needs to estimate only one component. GridDehazeNet "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "13] proposes that learning to restore the image is better than estimating $t$ , because the latter will fall into suboptimal solutions. And most recent works "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "14\u201320] tend to estimate the haze-free image or the residual between the haze-free image and the hazy image."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "Since the dehazing performance of the learning-based methods dramatically depends on the quality and size of the dataset, several datasets have been proposed. These dehazing datasets are divided into two main categories: real datasets "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "46\u201349] and synthetic datasets "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "50\u201352]. Real datasets use real haze produced by professional haze machines to generate real hazy images. Synthetic datasets generally use Eq.(1) to synthesize the corresponding hazy images with haze-free images and depth maps. Although the real datasets seem to be more attractive, it is difficult to obtain enough image pairs, and the distribution of the haze produced by the haze machine still differs significantly from the real haze. Hence, most methods tend to use synthetic datasets for training and testing. In contrast to these datasets, this paper presents a new synthetic remote sensing image dehazing dataset named RS-Haze for evaluating the method\u2019s capability to remove highly nonhomogeneous haze. RS-Haze is larger and more realistic than previous datasets "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "53\u201356], taking into account sensor characteristics, haze distribution and particle size, wavelengths of light, and other factors that are overlooked."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "heading",
    "attrs": {
      "level": 3
    },
    "style": "atx",
    "children": [
      {
        "type": "text",
        "raw": "B. Vision Transformers"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "CNN has dominated most computer vision tasks for years, while recently, the Vision Transformer (ViT) "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "57] architectures show the capability of replacing CNNs. ViT pioneered the direct application of the Transformer architecture "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "22], which projects images into token sequences via patch-wise linear embedding. The shortcomings of the original ViT are its weak inductive bias and the quadratic computational cost. To this end, PVT "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "23] uses the pyramid architecture to introduce multi-scale inductive bias and downsamples the key and value to reduce the computational cost. T2T-ViT "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "24] uses the unfolding operation just like CNNs for tokenization, and it uses the Performer "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "25] to lower the computational cost. Besides, some works "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "26\u201329] employ convolution in the early stages to introduce the inductive bias. Swin Transformer "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "30] partitions tokens into windows and performs self-attention within a window to keep the linear computational cost. It employs the cyclic shift scheme to bridge windows so that adjacent blocks adopt different window partitions. Since then, many follow-ups to Swin Transformer have been proposed. For example, some methods bridge windows by reshaping the tensor "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "31\u201334]; while some methods bridge windows by using tokens with global receptive fields as proxies "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "35\u201337]; and others use modified window partitioning schemes "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "38\u2013 40]. Our DehazeFormer can be considered as a combination of Swin Transformer and U-Net "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "58], but with several critical modifications for image dehazing."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "image",
        "children": [
          {
            "type": "text",
            "raw": ""
          }
        ],
        "attrs": {
          "url": "images/4b0b6333b8eaad02b7dd86def1849e8d4ff72f8a2d513cf4bf6de7e59cc94e8f.jpg"
        }
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "Fig. 2. DehazeFormer is a modified 5-stage U-Net, whose convolutional blocks are replaced by our DehazeFormer blocks. The components illustrated with dashed boxes in the DehazeFormer block indicate they are optional. The SK fusion and soft reconstruction layers are proposed to replace the original concatenation fusion and global residual. The input size is $H\\times W$ , and the size of feature maps in each stage is shown below the DehazeFormer block."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "There are also some variants of Swin Transformer for lowlevel vision tasks. SwinIR "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "59] is one of the pioneers to employ Swin Transformer in low-level vision tasks, which builds a large residual block consisting of stacked Swin Transformer layers and a subsequent convolutional layer. Uformer "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "60] uses Swin Transformer blocks to build a U-Net-like network and inserted depth-wise convolution (DWConv) "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "61] in the feed-forward network (FFN) like LocalViT "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "62]. However, we found that they perform very poorly in image dehazing. We attribute this to the fact that they inherit the normalization layer, window partitioning scheme, and activation function from the original Swin Transformer. There are a few ViTbased dehazing networks proposed, such as HyLoG-ViT "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "63] and TransWeather "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "64]. However, HyLoG-ViT does not show convincing performance, while TransWeather aims to use a DETR-like framework "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "65] to handle multiple weather conditions simultaneously."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "heading",
    "attrs": {
      "level": 2
    },
    "style": "atx",
    "children": [
      {
        "type": "text",
        "raw": "III. DEHAZEFORMER"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "heading",
    "attrs": {
      "level": 3
    },
    "style": "atx",
    "children": [
      {
        "type": "text",
        "raw": "A. Overall"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "DehazeFormer\u2019s network architecture is based on the popular Swin Transformer "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "30], but incorporates several improvements to compensate for the deficiencies of the original Swin Transformer when dealing with image dehazing. Fig. 2 shows the overall architecture of the DehazeFormer. Given the image pair $"
      },
      {
        "type": "text",
        "raw": "{"
      },
      {
        "type": "text",
        "raw": "I(x),J(x)"
      },
      {
        "type": "text",
        "raw": "}"
      },
      {
        "type": "text",
        "raw": "$ , we only compute the $L_{1}$ loss to train the DehazeFormers."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "First, we briefly review the Swin Transformer. Given an input feature map $X\\in\\mathbb{R}^{b\\times h\\times w\\times c}$ , we project $X$ to $Q,K,V$ (query, key, value) using linear layers and group tokens using window partitioning. Swin Transformer applies MHSA within the window, and the window partitioning of adjacent blocks is different. For simplicity, the following $Q,K,V\\in\\mathbb{R}^{b\\times l\\times d}$ correspond to a single window & header, where $l$ is the tokens number in a window and $d$ is the dimension. Thus the self attention is computed by"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "$$"
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "(Q,K,V)=\\mathrm{Softmax}\\left(Q K^{T}/\\sqrt{d}+B\\right)V,"
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "$$"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "where $B$ is the relative position bias term. A linear layer follows it to project the output of the attention."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "Our proposed DehazeFormer block differs from the original Swin Transformer block in the normalization layer, the nonlinear activation function, and the spatial information aggregation scheme, detailed in the subsequent subsections. Besides the DehazeFormer block, the SK fusion and soft reconstruction layers are proposed to replace the concatenation fusion layer and global residual learning."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "The SK fusion layer is inspired by SKNet "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "45], it is designed to fuse multiple branches using channel attention. Let the two feature maps be $x_{1}$ and $x_{2}$ , we first use a linear layer $f(\\cdot)$ to project $x_{1}$ to $\\hat{x}"
      },
      {
        "type": "emphasis",
        "children": [
          {
            "type": "text",
            "raw": "{1}$ . We use the global average pooling $\\mathrm{GAP(\\cdot)}$ , MLP (Linear-ReLU-Linear) $\\mathcal{F}"
          }
        ]
      },
      {
        "type": "text",
        "raw": "{M L P}(\\cdot)$ , softmax function and split operation to obtain the fusion weights:"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "$$"
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "{"
      },
      {
        "type": "text",
        "raw": "a_{1},a_{2}"
      },
      {
        "type": "text",
        "raw": "}"
      },
      {
        "type": "text",
        "raw": "=\\mathrm{Split}(\\mathrm{Softmax}(\\mathcal{F}"
      },
      {
        "type": "emphasis",
        "children": [
          {
            "type": "text",
            "raw": "{M L P}(\\mathrm{GAP}\\left(\\hat{x}"
          }
        ]
      },
      {
        "type": "text",
        "raw": "{1}+x_{2}\\right)))."
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "$$"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "We use the weights $"
      },
      {
        "type": "text",
        "raw": "{"
      },
      {
        "type": "text",
        "raw": "a_{1},a_{2}"
      },
      {
        "type": "text",
        "raw": "}"
      },
      {
        "type": "text",
        "raw": "$ to fuse $\\hat{x}"
      },
      {
        "type": "emphasis",
        "children": [
          {
            "type": "text",
            "raw": "{1},x"
          }
        ]
      },
      {
        "type": "text",
        "raw": "{2}$ with an additional short residual via $y=a_{1}\\hat{x}"
      },
      {
        "type": "emphasis",
        "children": [
          {
            "type": "text",
            "raw": "{1}+a"
          }
        ]
      },
      {
        "type": "text",
        "raw": "{2}x_{2}+x_{2}$ ."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "Current image dehazing networks generally predict the reconstructed image $\\hat{J}(x)$ or global residual $\\dot{R(x)}=\\hat{J}(x)-$ $I(x)$ . We consider it beneficial to introduce priors, provided that there are no strong constraints since the degradation model is an approximation. We rewrite Eq.(1) as"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "$$"
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "J(x)=K(x)I(x)+B(x)+I(x),"
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "$$"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "where $K(x)=1/t(x)-1$ and $B(x)=-\\left(1/t(x)-1\\right)A$ . We drive the network to predict $O\\in\\mathbb{R}^{h\\times w\\times4}$ , and split $O$ into $K\\in\\mathbb{R}^{h\\times w\\times1}$ and $B\\in\\mathbb{R}^{h\\times w\\times3}$ . As a result, the network architecture softly constrains the relationship between $K(x)$ and $B(x)$ . This weak prior allows the network to degenerate to predict global residuals (i.e., $K(x)=\\mathbf{0}$ , $B(x)=R(x))$ . For convenience, we refer to Eq.(5) as soft reconstruction."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "heading",
    "attrs": {
      "level": 3
    },
    "style": "atx",
    "children": [
      {
        "type": "text",
        "raw": "B. Rescale Layer Normalization"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "The normalization layer plays a vital role in neural network architecture since it stabilizes the network\u2019s training. However, we find that LayerNorm "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "41], which Transformers commonly use, may be unsuitable for image dehazing."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "We first review the formulation of LayerNorm used by Transformers. Assume that the shape of the feature map $x\\in\\mathbb{R}^{b\\times n\\times c}$ , where $n=h\\times w$ (i.e., height and width), the normalization process can be expressed as:"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "$$"
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "\\hat{x}"
      },
      {
        "type": "emphasis",
        "children": [
          {
            "type": "text",
            "raw": "{i}=\\frac{x"
          }
        ]
      },
      {
        "type": "text",
        "raw": "{i}-\\mu_{i}}{\\sigma_{i}}\\cdot\\gamma_{i}+\\beta_{i}."
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "$$"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "Here $\\mu$ and $\\sigma$ denote the mean and standard deviation, $\\gamma$ and $\\beta$ are learned scaling factor and bias, and $i=(i_{b},i_{n},i_{c})$ denotes the index. In LayerNorm, $\\mu$ and $\\sigma$ are computed along the $c$ -axis, making $\\boldsymbol{\\mu},\\boldsymbol{\\sigma}\\in\\mathbb{R}^{b\\times n}$ . We believe that the mean and standard deviation are correlated with brightness and contrast for images, so the relative brightness and contrast between image patches are somehow discarded after LayerNorm. To this ned, we compute $\\mu$ and $\\sigma$ along the $(n,c)$ -axes, leading to $\\boldsymbol{\\mu},\\boldsymbol{\\sigma}~\\in~\\mathbb{R}^{b}$ . We note this normalization method is the LayerNorm more commonly used in CNNs, referred to as LayerNorm\u2020 in this paper."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "We conduct a simple experiment to show the negative effects of LayerNorm as shown in Fig. 3. Specifically, we build autoencoders using only patch embedding, normalization, and patch reconstruction layers. We train these autoencoders to reconstruct a single input image. Without global residuals, learning identity mappings is not a trivial task "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "66]. When LayerNorm is inserted, we can clearly see the block artifacts appearing in the reconstructed image. Because this autoencoder does not involve interactions between patches, it can only memorize the statistics of the sky region at the expense of the rich-texture region. By changing LayerNorm to LayerNorm\u2020, we largely overcome its negative effects."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "image",
        "children": [
          {
            "type": "text",
            "raw": ""
          }
        ],
        "attrs": {
          "url": "images/0b0345c927e34617090e5a8db035aeafdfd26e0a1e6f3761d3f8d40cc75b7005.jpg"
        }
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "Fig. 3. Simple autoencoders for analyzing the normalization methods. From left to right, there are the autoencoders\u2019 architectures, output images, and error maps, where the error is scaled by $8\\times$ for better viewing. The embedding layer and reconstruction layer are linear layers with patch-wise tensor reshaping."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "However, LayerNorm\u2020 still discards the mean and standard deviation of the feature map. So we propose the Rescale Layer Normalization (RescaleNorm), which is built based on LayerNorm\u2020, but the mean and standard deviation computed are saved and introduced at the end of the residual block. Specifically, we first fetch the $\\mu,\\sigma\\in\\mathbb{R}^{b\\times1\\times1}$ , and normalize the input feature map $x$ to $\\hat{x}$ via Eq.(6). We then use the main block $\\mathbf{F}(\\cdot)$ to process $\\hat{x}$ to obtain the output $\\hat{y}$ . We use two linear layers with weights $W_{\\gamma},W_{\\beta}~\\in~\\mathbb{R}^{1\\times c}$ and biases $B_{\\gamma},B_{\\beta}\\in\\mathbb{R}^{1\\times1\\times c}$ to transform $\\mu$ and $\\sigma$ via $"
      },
      {
        "type": "text",
        "raw": "{"
      },
      {
        "type": "text",
        "raw": "\\gamma,\\beta"
      },
      {
        "type": "text",
        "raw": "}"
      },
      {
        "type": "text",
        "raw": "=$ $"
      },
      {
        "type": "text",
        "raw": "{"
      },
      {
        "type": "text",
        "raw": "\\sigma W_{\\gamma}+B_{\\gamma},\\mu W_{\\beta}+B_{\\beta}"
      },
      {
        "type": "text",
        "raw": "}"
      },
      {
        "type": "text",
        "raw": "$ , where $\\gamma,\\beta\\in\\mathbb{R}^{b\\times1\\times c}$ . To accelerate convergence, we initialize $B_{\\gamma}$ and $B_{\\beta}$ to $\\mathbf{1}$ and 0. We inject $\\gamma$ and $\\beta$ into $\\hat{y}$ to reintroduce the mean and standard deviation. Therefore, RescaleNorm can be formulated as:"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "$$"
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "y=\\mathbf F\\left(\\frac{x-\\mu}{\\sigma}\\cdot\\gamma+\\beta\\right)\\cdot(\\sigma W_{\\gamma}+B_{\\gamma})+(\\mu W_{\\beta}+B_{\\beta})."
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "$$"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "Compared to BatchNorm "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "67], LayerNorm is not a cheap operation. It needs to compute the mean and standard deviation during inference instead of using the running estimates tracked on the training set. Therefore, we remove the normalization layer before the MLP, as we find that this hardly worsens the method\u2019s performance."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "heading",
    "attrs": {
      "level": 3
    },
    "style": "atx",
    "children": [
      {
        "type": "text",
        "raw": "C. Nonlinear Activation Function with Simple Inversal"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "GELU performs better than ReLU in high-level tasks "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "43, 68, 69]. However, GELU is much less used than ReLU "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "44] and LeakyReLU "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "70] in low-level vision tasks. Although some recent Transformer-based image processing networks inherit GELU "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "59, 60], in our experiments, ReLU and LeakyReLU still perform better than GELU in image dehazing. We believe that GELU does not work in the image dehazing task because it is not easily inverted. If we consider GELU as an image filter, it causes the gradient reversal problem because of its non-monotonicity. Unlike high-level vision tasks, the feature maps in image dehazing would be decoded into images, resulting in the reversal gradients introduced by GELU to react in the output image."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "Comparing GELU and ReLU, another reason for GELU\u2019s inferior performance is its stronger nonlinearity since it is more complicated than piece-wise linear functions. Hence we propose SoftReLU, which is a simple smooth approximation to the ReLU as an excess between GELU and ReLU:"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "image",
        "children": [
          {
            "type": "text",
            "raw": ""
          }
        ],
        "attrs": {
          "url": "images/eddb7b31049a0ef9277e2ab899f592bb98e63ff826570a66683df2fc83e7904c.jpg"
        }
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "Fig. 4. The ReLU, GELU, LeakyReLU $\\zeta\\omega=0.1\\AA$ ), and SoftReLU $(\\alpha=0.1"
      },
      {
        "type": "text",
        "raw": "$"
      },
      {
        "type": "text",
        "raw": " )."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "$$"
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "\\mathrm{SoftReLU}(x)=\\frac{x+\\sqrt{x^{2}+\\alpha^{2}}-\\alpha}{2}."
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "$$"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "where $\\alpha$ is a shape parameter. In particular, SoftReLU is equivalent to ReLU when we set $\\alpha=0$ . To mimic GELU, we set $\\alpha=0.1$ in our experiments."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "Fig. 4 illustrates a comparison of the SoftReLU with other nonlinear activation functions. We perform ablation studies on activation functions and find that LeakyReLU performs similarly to the ReLU, better than SoftReLU and GELU, while SoftReLU is better than GELU. Therefore, we believe that the nonlinear activation function\u2019s invertibility is essential for image dehazing networks."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "heading",
    "attrs": {
      "level": 3
    },
    "style": "atx",
    "children": [
      {
        "type": "text",
        "raw": "D. Shifted Window Partitioning with Reflection Padding"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "Swin Transformer uses cyclic shift with masked MHSA to implement efficient batch computation for shifted window partitioning. Because of the mask, the window size at the edge of the image is smaller than the set window size. For high-level vision tasks, the object of the image is often in the center of the image, making the edge pixels of the image contribute little to the result. For image dehazing, image edges are as important as image centers. A small window size leads to a smaller number of tokens in the window, which biases the network\u2019s training. We consider that the network\u2019s performance can be improved by keeping the window size of the image edges the same as the set window size."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "To avoid introducing unreasonable inter-patch interactions, we propose to use reflection padding to achieve efficient batch computation for shifted window partitioning, as Fig. 4 illustrated. Swin Transformer\u2019s original paper mentions how to use padding to implement batch computation. However, its proposed padding-based scheme is equivalent to the cyclic shift since the masked MHSA will still be employed. Unlike Swin Transformer, we use reflection padding and do not perform masking. The drawback of this method is that it does introduce additional computational costs compared to the cyclic shift. Fortunately, image dehazing networks tend to process much larger images than image patches at training time. When the image size becomes larger, the percentage of edge regions will become smaller."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "image",
        "children": [
          {
            "type": "text",
            "raw": ""
          }
        ],
        "attrs": {
          "url": "images/1c19269dfd95d853b63305ce6cdb8ea0ac4998ae68e204ab70571b32a95204cd.jpg"
        }
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "Fig. 5. Comparison of our proposed reflection padding scheme with cyclic shift scheme for shifted window partitioning. The actual percentage of the edge area is much smaller than the illustration."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "heading",
    "attrs": {
      "level": 3
    },
    "style": "atx",
    "children": [
      {
        "type": "text",
        "raw": "E. W-MHSA with Parallel Convolution"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "We consider that multiplying MHSA is a low-pass filtering, a similar conclusion was presented in a very recent work "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "29]. Although the spatial information aggregation weight of MHSA is dynamic, the weight is always positive, making it work like smoothing. As a counterpart to MHSA\u2019s spatial information aggregation style, we perform additional convolution on $V$ . Thus the spatial information aggregation scheme is"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "$$"
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "\\begin{array}{c}{\\mathrm{Aggregation}(Q,K,V)=\\mathrm{Softmax}\\left(Q K^{T}/\\sqrt{d}+B\\right)V}"
      },
      {
        "type": "text",
        "raw": "\\"
      },
      {
        "type": "text",
        "raw": " {+\\mathrm{Conv}(\\hat{V}),}\\end{array}"
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "$$"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "where $\\hat{V}\\in\\mathbb{R}^{b\\times h\\times w\\times c}$ denotes the $V$ before window partitioning, and $\\mathrm{Conv}(\\cdot)$ can be either DWConv or a ConvBlock (Conv-ReLU-Conv). In other words, we still use the attention mechanism to aggregate information within the window, but also use convolution to aggregate information in the neighborhood without considering window partitioning. Furthermore, we discard the MHSA in some blocks, especially in the encoder\u2019s shallow stages and the decoder, and the revised block is shown in Fig. 2. The components illustrated with dashed boxes in the DehazeFormer block indicate they are optional. Specifically, some blocks do not contain MHSA and RescaleNorm, and reflection padding and cropping are used only when shifted window partitioning is required."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "Note that a similar idea was proposed in CSwin Transformer "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "38], but we use the convolution to extract high frequency information instead of acting as a positional embedding. In contrast to CSwin Transformer, we use reflection padding instead of zero padding because we do not need it to encode position information implicitly "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "71]. Most importantly, DehazeFormer\u2019s convolutional layer is performed on $\\hat{V}$ before window partitioning, thus it provides the capability to aggregate information between windows."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "heading",
    "attrs": {
      "level": 3
    },
    "style": "atx",
    "children": [
      {
        "type": "text",
        "raw": "$F.$ Implementation Details"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "We provide five DehazeFormer\u2019s variants (-T, -S, -B, -M, and $^{-\\mathrm{L}}$ for tiny, small, basic, middle, and large, respectively)."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "TABLE I DETAILED ARCHITECTURE SPECIFICATIONS."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "block_html",
    "raw": "<html><body><table><tr><td colspan=\"5\">Num. of Blocks</td><td>Embedding Dims</td><td>MLP Ratio</td><td>Attention Ratio</td><td>Num. of Heads</td><td>Conv Type</td></tr><tr><td>DehazeFormer-T</td><td>[4, 4,</td><td>4\uff0c</td><td>2, 2]</td><td>[24, 48,</td><td>96, 48, 24]</td><td>[2, 4, 4, 2, 2]</td><td>[1/4, 1/2, 3/4, 0, 0]</td><td>[2, 4, 6, 1, 1]</td><td>DWConv</td></tr><tr><td>DehazeFormer-S</td><td>[8,8,8,</td><td></td><td>4, 4]</td><td>[24, 48,</td><td>96, 48, 24]</td><td>[2, 4, 4, 2, 2]</td><td>[1/4, 1/2, 3/4, 0, 0]</td><td>[2,4,6,1, 1]</td><td>DWConv</td></tr><tr><td>DehazeFormer-B</td><td>[16, 16, 16,</td><td></td><td>8, 8]</td><td>[24, 48,</td><td>96, 48, 24]</td><td>[2, 4, 4, 2, 2]</td><td>[1/4, 1/2, 3/4, 0, 0]</td><td>[2, 4, 6, 1, 1]</td><td>DWConv</td></tr><tr><td>DehazeFormer-M</td><td>[12,12,12,</td><td></td><td>6\uff0c 6]</td><td></td><td>[24,48, 96, 48, 24]</td><td>[2,4, 4, 2, 2]</td><td>[1/4, 1/2, 3/4, 0, 0]</td><td>[2,4, 6, 1, 1]</td><td>ConvBlock</td></tr><tr><td> DehazeFormer-L</td><td>[16, 16, 16, 12, 12]</td><td></td><td></td><td></td><td>[48, 96,192,96, 48]</td><td>[2, 4, 4, 2, 2]</td><td>[1/4, 1/2, 3/4, 0, 0]</td><td>[2, 4, 6, 1, 1]</td><td>ConvBlock</td></tr></table></body></html>  \n"
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "TABLE I lists the detailed configurations of these variants. The attention ratio here indicates the percentage of blocks containing MHSA, and we place the blocks containing MHSA at the end of each stage. For the three small models (-T, -S, -B), we use DWConv $K=5$ ) as the parallel convolutions. Because DWConv is an operation with low computational cost but high memory access cost "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "72], we use ConvBlock $K=3$ ) for two large models (-M, -L)."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "When training, images are randomly cropped to $256\\times256$ patches. We set different mini-batch sizes for training different variants, i.e., $"
      },
      {
        "type": "text",
        "raw": "{"
      },
      {
        "type": "text",
        "raw": "32,16,16,16,8"
      },
      {
        "type": "text",
        "raw": "}"
      },
      {
        "type": "text",
        "raw": "$ for $"
      },
      {
        "type": "text",
        "raw": "{"
      },
      {
        "type": "text",
        "raw": "$ -T, -S, -B, -M, $-\\mathrm{L}"
      },
      {
        "type": "text",
        "raw": "}"
      },
      {
        "type": "text",
        "raw": "$ . Referring to the linear scaling rule "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "73], we set the initial learning rate to $"
      },
      {
        "type": "text",
        "raw": "{"
      },
      {
        "type": "text",
        "raw": "4,2,2,2,1"
      },
      {
        "type": "text",
        "raw": "}"
      },
      {
        "type": "text",
        "raw": "\\times10^{-4}$ for $"
      },
      {
        "type": "text",
        "raw": "{"
      },
      {
        "type": "text",
        "raw": "-\\mathrm{{T},\\ -{S},\\ -{B},\\ -{M},\\ -\\mathrm{{L}}}"
      },
      {
        "type": "text",
        "raw": "}"
      },
      {
        "type": "text",
        "raw": "$ . We use AdamW optimizer "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "74] with the cosine annealing strategy "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "75] to train the models, where the learning rate gradually decreases from the initial learning rate to $"
      },
      {
        "type": "text",
        "raw": "{"
      },
      {
        "type": "text",
        "raw": "4,2,2,2,1"
      },
      {
        "type": "text",
        "raw": "}"
      },
      {
        "type": "text",
        "raw": "\\times10^{-6}$ ."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "heading",
    "attrs": {
      "level": 2
    },
    "style": "atx",
    "children": [
      {
        "type": "text",
        "raw": "IV. RS-HAZE DATASET"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "The RESIDE dataset is a large-scale homogeneous image dehazing dataset that advances the image dehazing. However, evaluating the method\u2019s capability of non-homogeneous image dehazing still relies on some small, unrealistic datasets "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "46], which use a haze machine to generate the non-homogeneous haze that would hardly exist. In contrast, remote sensing image dehazing is a practical non-homogeneous image dehazing task because the haze in remote sensing images is highly nonhomogeneous. Therefore, we propose a new synthetic remote sensing image dehazing dataset named RS-Haze. Comparing to some remote sensing image dehazing datasets "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "55, 56, 76, 77], our proposed dataset is more realistic and larger scale."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "heading",
    "attrs": {
      "level": 3
    },
    "style": "atx",
    "children": [
      {
        "type": "text",
        "raw": "A. Haze Synthesis Formulation"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "For generating remote sensing hazy images, researchers generally set $d(x)$ to $d_{0}$ since the remote sensing imaging system has a fixed imaging distance. However, $d(x)$ is not the imaging distance but the thickness of the medium that scatters the light. Further, the haze medium in remote sensing images is non-homogeneous, making $d(x)$ vary spatially but consistent over all channels. Besides, the transmission map $t(x)$ is correlated with wavelength and haze conditions. Inspired by prior works "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "1, 2], we model the scattering coefficient as"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "$$"
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "\\beta(\\lambda,\\gamma(x))=c_{0}\\lambda^{-\\gamma(x)},"
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "$$"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "where $c_{0}$ is a constant, $\\lambda$ is the channel\u2019s center wavelength, and the exponent $\\gamma(\\boldsymbol{x})$ corresponds to the region-wise haze conditions. Combining Eq.(2) and Eq.(10), we can derive"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "$$"
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "t(x)=e^{-\\beta(\\lambda,\\gamma(x))d(x)}."
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "$$"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "Then the relationship of the transmission map between channel $i$ and channel $j$ can be expressed as"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "$$"
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "\\ln t_{i}(x)/\\ln t_{j}(x)=\\beta_{i}\\left(\\lambda_{i},\\gamma(x)\\right)/\\beta_{j}\\left(\\lambda_{j},\\gamma(x)\\right),"
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "$$"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "where $t_{"
      },
      {
        "type": "text",
        "raw": "{"
      },
      {
        "type": "text",
        "raw": "i,j"
      },
      {
        "type": "text",
        "raw": "}"
      },
      {
        "type": "text",
        "raw": "}(x),\\beta_{"
      },
      {
        "type": "text",
        "raw": "{"
      },
      {
        "type": "text",
        "raw": "i,j"
      },
      {
        "type": "text",
        "raw": "}"
      },
      {
        "type": "text",
        "raw": "},\\lambda_{"
      },
      {
        "type": "text",
        "raw": "{"
      },
      {
        "type": "text",
        "raw": "i,j"
      },
      {
        "type": "text",
        "raw": "}"
      },
      {
        "type": "text",
        "raw": "}$ are the transmission map, scattering coefficient and center wavelength of channel $"
      },
      {
        "type": "text",
        "raw": "{"
      },
      {
        "type": "text",
        "raw": "i,j"
      },
      {
        "type": "text",
        "raw": "}"
      },
      {
        "type": "text",
        "raw": "$ , respectively. If we take channel 1 as the reference channel, and the transmission map $t_{j}(x)$ can be obtained via"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "$$"
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "t_{j}(x)=t_{1}(x)^{\\left(\\frac{\\lambda_{1}}{\\lambda_{j}}\\right)^{\\gamma(x)}},"
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "$$"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "The final haze imaging model can be formulated as"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "$$"
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "I_{j}(x)=J_{j}(x)t_{j}(x)+A_{j}\\left(1-t_{j}(x)\\right)."
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "$$"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "Here we can collect clean images $J$ and set $\\lambda_{j}$ to the center wavelength of the corresponding channel. Thus the problem lies in how to obtain $t_{1}(x),A_{j}$ and $\\gamma(\\boldsymbol{x})$ ."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "heading",
    "attrs": {
      "level": 3
    },
    "style": "atx",
    "children": [
      {
        "type": "text",
        "raw": "B. Synthesis Pipeline"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "We first consider how to extract the transmission map $t_{1}(x)$ from the real hazy images. The reflectance of the cirrus channel (channel 9) can characterize the spatially nonhomogeneous properties of the natural haze "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "54], so we use it to generate the transmission map $t_{1}(x)$ as"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "$$"
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "t_{1}(x)=1-\\omega\\rho_{9}(x),"
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "$$"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "where $\\rho_{9}(x)$ is the reflectance of the cirrus channel of the real hazy image, and $\\omega$ is a hyperparameter corresponding to the haze density. We find a large dark level in the cirrus channel, making the pixels over 5000 even in the haze-free image. Thus we apply a linear stretch of $0.1"
      },
      {
        "type": "text",
        "raw": "%"
      },
      {
        "type": "text",
        "raw": "$ to the cirrus channel to remove the dark level. If we do not remove the dark level, then the maximum value of $t_{1}(x)$ is always smaller than 1, which is equivalent to an additional homogenous haze."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "After that, we need to estimate the atmospheric light of the scene from the haze-free images. To this end, we regard the mean value of each channel\u2019s brightest $0.01"
      },
      {
        "type": "text",
        "raw": "%"
      },
      {
        "type": "text",
        "raw": "$ pixels as the atmospheric light"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "54]. However, there are still many cases of inaccurate estimation. Since the atmospheric light of each channel is correlated with each other, an additional constraint can be introduced to correct for the incorrectly estimated atmospheric light. Assume that the mean value of the estimated atmospheric light of all remote sensing images in channel $i$ is $\\overline{{A_{i}}}$ . We set the reference values $\\overline{{A_{r}}}=(\\bar{A_{6}}+\\overline{{A_{7}}})/2$ and $A_{r}~=~(A_{6}+A_{7})/2$ , and obtain the corrected atmospheric light of channel $i$ by $A_{i}^{\\prime}=A_{r}\\cdot\\overline{{A_{i}}}/\\overline{{A_{r}}}$ . Fig. 6 shows how the correction refines the atmospheric light."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "image",
        "children": [
          {
            "type": "text",
            "raw": ""
          }
        ],
        "attrs": {
          "url": "images/9863e249bd4948bf742b603693363cb6f8a3a0180771ab33330cabd744d2e0e5.jpg"
        }
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "Fig. 6. Correction of the estimated atmospheric light. The top is atmospheric lights before and after correction, and the bottom is three synthesis samples."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "TABLE II ATMOSPHERIC RELATIVE SCATTERING MODELS"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "block_html",
    "raw": "<html><body><table><tr><td>Reflectance p</td><td>Condition</td><td>Exponent </td></tr><tr><td>0.000 <p\u22640.215</td><td>very clear</td><td>4.0</td></tr><tr><td>0.215<p\u22640.294</td><td>clear</td><td>2.0</td></tr><tr><td>0.294<p\u22640.373</td><td>moderate</td><td>1.0</td></tr><tr><td>0.373 <p\u22640.451</td><td>hazy</td><td>0.7</td></tr><tr><td>0.451 <p\u22640.529</td><td>very hazy</td><td>0.5</td></tr><tr><td>0.529 < p<1.000</td><td>cloudy</td><td>0.0</td></tr></table></body></html>  \n"
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "Finally, we need to obtain the $\\gamma(\\boldsymbol{x})$ . Because the particle properties of haze can vary depending on the haze density "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "78], the exponent $\\gamma(\\boldsymbol{x})$ should be modeled as a function of haze density. As shown in the Table II, we model the exponent $\\gamma(\\boldsymbol{x})$ related to the haze reflectance $\\rho$ . We use $\\omega\\rho_{9}(x)$ as the haze reflectance and fit the relationship between $\\gamma(\\boldsymbol{x})$ and $\\omega\\rho_{9}(x)$ with a cubic curve, which can be formulated as"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "$$"
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "\\gamma(x)=a_{3}(\\omega\\rho_{9}(x))^{3}+a_{2}(\\omega\\rho_{9}(x))^{2}+a_{1}(\\omega\\rho_{9}(x))+a_{0},"
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "$$"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "TABLE III SUMMARY OF RS-HAZE DATASET"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "block_html",
    "raw": "<html><body><table><tr><td>Name</td><td>Density</td><td>W</td><td>Train</td><td>Test</td></tr><tr><td>RS-Haze-L</td><td>Light</td><td>0.100-0.399</td><td>17100</td><td>900</td></tr><tr><td>RS-Haze-M</td><td>Moderate</td><td>0.400-0.699</td><td>17100</td><td>900</td></tr><tr><td>RS-Haze-D</td><td>Dense</td><td>0.700-0.999</td><td>17100</td><td>900</td></tr><tr><td>RS-Haze-mix</td><td>All</td><td>0.100-0.999</td><td>51300</td><td>2700</td></tr></table></body></html>  \n"
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "where $a_{0}=6.537$ , $a_{1}=-27.465$ , $a_{2}=41.224$ , and $a_{3}=$ $-21.547$ . Note that we clip $\\gamma(\\boldsymbol{x})$ to "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "0, 4] to avoid outliers."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "Now we can use Eq.(14) to synthesize the dataset. However, we found that the network trained with this dataset works well in the dense haze region of the synthetic image, but performs poorly on the dense haze region of the real image. We consider that, when the haze is dense, it is likely to block all the light from the ground "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "55]. According to the haze imaging model Eq.(14), even when $t_{j}(x)$ is small and the synthesized haze is dense, there still exists information residuals from haze-free channel $J_{j}(x)$ . To this end, we revise Eq.(14) as"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "$$"
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "I_{j}(x)=J_{j}(x)t_{j}(x)^{\\prime}+A_{j}\\left(1-t_{j}(x)\\right),"
      },
      {
        "type": "softbreak"
      },
      {
        "type": "text",
        "raw": "$$"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "76 remote sensing images containing diverse topography with good weather conditions and performed atmospheric correction using the FLAASH module "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "79]. Meanwhile, 108 cloudy remote sensing images are selected to generate transmission maps using their cirrus channels. We crop $512\\times512$ image patches from the original remote sensing image using the GDAL library "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "80]. Finally, we obtained 6000 patches of hazefree MS images containing various terrain and 1500 patches of cirrus channels with a distribution similar to natural haze. Each haze-free image generates nine synthetic hazed images containing three different haze densities. The haze density is controlled by setting the range of $\\omega$ . The values of $\\omega$ in each range are obtained by sampling from the truncated Gaussian function. The summary of RS-Haze is shown in Table III."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "where $t_{j}(x)^{\\prime}=1-\\xi(1-t_{j}(x))$ , and we also clip $t_{j}(x)^{\\prime}$ to "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "0, 1] to avoid outliers. Here $t_{j}(x)$ is consistent with Eq.(13), but we introduce a decay factor $\\xi=1.25$ to attenuate the information of $J_{j}(x)$ . When the haze reaches a certain concentration, the synthesized hazy image completely lose the information of the hazy-free image in that region."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "heading",
    "attrs": {
      "level": 3
    },
    "style": "atx",
    "children": [
      {
        "type": "text",
        "raw": "C. Dataset Details"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "We download the multi-spectral (MS) images from the Landsat-8 Level 1 data product on EarthExplorer. We selected"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "heading",
    "attrs": {
      "level": 2
    },
    "style": "atx",
    "children": [
      {
        "type": "text",
        "raw": "V. EXPERIMENTS"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "heading",
    "attrs": {
      "level": 3
    },
    "style": "atx",
    "children": [
      {
        "type": "text",
        "raw": "A. Experimental setup"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "Our experiments are performed on the RESIDE dataset "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "52] and our RS-Haze dataset. The RESIDE dataset is one of the most commonly used datasets for image dehazing, and it contains three versions: RESIDE-V0, RESIDE-Standard, and RESIDE- $"
      },
      {
        "type": "text",
        "raw": "_"
      },
      {
        "type": "text",
        "raw": "{\\beta}$ . It contains several subsets, of which the most commonly used are: indoor training set (ITS), outdoor training set (OTS), and synthetic objective testing set (SOTS). We found that the existing works use different experimental setups and can be divided into two main categories: training on a combination of the ITS and the OTS and testing on the SOTS; training on the ITS and the OTS separately and testing on the indoor and outdoor scenes of the SOTS separately. For proving the effectiveness of DehazeFormer, we perform experiments on both setups, which we name RESIDE-Full and RESIDE6K, respectively. We do not train large models under each experimental setup since the small models are good enough."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "list",
    "children": [
      {
        "type": "list_item",
        "children": [
          {
            "type": "block_text",
            "children": [
              {
                "type": "text",
                "raw": "RESIDE-Full: Models are trained and tested on the indoor and outdoor scenes separately. Following FFA-Net "
              },
              {
                "type": "text",
                "raw": "["
              },
              {
                "type": "text",
                "raw": "18], we use the full ITS (13,990 image pairs from RESIDEStandard) and OTS (313,950 image pairs from RESIDE-V0) to train indoor models and outdoor models and test them on indoor scenes (500 image pairs) and outdoor scenes (500 image pairs) of the SOTS, respectively. In this experimental setup, all models are trained using their original training strategies, and we replicate the best results reported in the previous works. We train DehazeFormers on ITS for 300 epochs and on OTS for 30 epochs. Note that a few images in the outdoor subset are smaller than the configured patch size, so we discard these images during training. Besides, because the upper part of the outdoor image is often sky, we use only horizontal flipping for data augmentation."
              }
            ]
          }
        ]
      }
    ],
    "tight": true,
    "bullet": ")",
    "attrs": {
      "depth": 0,
      "ordered": true
    }
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "TABLE IV QUANTITATIVE COMPARISON OF VARIOUS DEHAZING METHODS TRAINED ON THE RESIDE DATASETS."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "block_html",
    "raw": "<html><body><table><tr><td rowspan=\"2\">Methods</td><td colspan=\"2\">ITS</td><td colspan=\"2\">OTS</td><td colspan=\"2\">RESIDE-6K</td><td colspan=\"2\">RS-Haze</td><td rowspan=\"2\"></td><td rowspan=\"2\" colspan=\"2\">Overhead</td></tr><tr><td colspan=\"2\">SOTS-indoor</td><td colspan=\"2\">SOTS-outdoor</td><td colspan=\"2\">SOTS-mix</td><td colspan=\"2\">RS-Haze-mix</td></tr><tr><td></td><td>PSNR</td><td>SSIM</td><td>PSNR</td><td>SSIM</td><td>PSNR</td><td>SSIM</td><td></td><td>PSNR</td><td>SSIM</td><td>#Param MACs</td></tr><tr><td>(TPAMI'10) DCP [4]</td><td>16.62</td><td>0.818</td><td>19.13</td><td>0.815</td><td>17.88</td><td>0.816</td><td>17.86</td><td>0.734</td><td>-</td><td></td></tr><tr><td>(TIP'16) DehazeNet [8]</td><td>19.82</td><td>0.821</td><td>24.75</td><td>0.927</td><td>21.02</td><td>0.870</td><td>23.16</td><td>0.816</td><td>0.009M</td><td>0.581G</td></tr><tr><td>(ECCV'16) MSCNN [9]</td><td>19.84</td><td>0.833</td><td>22.06</td><td>0.908</td><td>20.31</td><td>0.863</td><td>22.80</td><td>0.823</td><td>0.008M</td><td>0.525G</td></tr><tr><td>(ICCV'17) AOD-Net [11]</td><td>20.51</td><td>0.816</td><td>24.14</td><td>0.920</td><td>20.27</td><td>0.855</td><td>24.90</td><td>0.830</td><td>0.002M</td><td>0.115G</td></tr><tr><td>(CVPR'18) GFN [12]</td><td>22.30</td><td>0.880</td><td>21.55</td><td>0.844</td><td>23.52</td><td>0.905</td><td>29.24</td><td>0.910</td><td>0.499M</td><td>14.94G</td></tr><tr><td>(WACV'19) GCANet [14]</td><td>30.23</td><td>0.980</td><td></td><td></td><td>25.09</td><td>0.923</td><td>34.41</td><td>0.949</td><td>0.702M</td><td>18.41G</td></tr><tr><td>(ICCV'19) GridDehazeNet [13]</td><td>32.16</td><td>0.984</td><td>30.86</td><td>0.982</td><td>25.86</td><td>0.944</td><td>36.40</td><td>0.960</td><td>0.956M</td><td>21.49G</td></tr><tr><td>(CVPR'20) MSBDN [17]</td><td>33.67</td><td>0.985</td><td>33.48</td><td>0.982</td><td>28.56</td><td>0.966</td><td>38.57</td><td>0.965</td><td>31.35M</td><td>41.54G</td></tr><tr><td>(ECCV'20) PFDN [15]</td><td>32.68</td><td>0.976</td><td></td><td>-</td><td>28.15</td><td>0.962</td><td>36.04</td><td>0.955</td><td>11.27M</td><td>50.46G</td></tr><tr><td>(AAAI'20) FFA-Net [18]</td><td>36.39</td><td>0.989</td><td>33.57</td><td>0.984</td><td>29.96</td><td>0.973</td><td>39.39</td><td>0.969</td><td>4.456M</td><td>287.8G</td></tr><tr><td>(CVPR'21) AECR-Net [19]</td><td>37.17</td><td>0.990</td><td>-</td><td>-</td><td>28.52</td><td>0.964</td><td>35.69</td><td>0.959</td><td>2.611M</td><td>52.20G</td></tr><tr><td>(ours) DehazeFormer-T</td><td>35.15</td><td>0.989</td><td>33.71</td><td>0.982</td><td>30.36</td><td>0.973</td><td>39.11</td><td>0.968</td><td>0.686M</td><td>6.658G</td></tr><tr><td>(ours) DehazeFormer-S</td><td>36.82</td><td>0.992</td><td>34.36</td><td>0.983</td><td>30.62</td><td>0.976</td><td>39.57</td><td>0.970</td><td>1.283M</td><td>13.13G</td></tr><tr><td>(ours) DehazeFormer-B</td><td>37.84</td><td>0.994</td><td>34.95</td><td>0.984</td><td>31.45</td><td>0.980</td><td>39.87</td><td>0.971</td><td>2.514M</td><td>25.79G</td></tr><tr><td>(ours) DehazeFormer-M</td><td>38.46</td><td>0.994</td><td>34.29</td><td>0.983</td><td>30.89</td><td>0.977</td><td>39.71</td><td>0.971</td><td>4.634M</td><td>48.64G</td></tr><tr><td>(ours) DehazeFormer-L</td><td>40.05</td><td>0.996</td><td></td><td>-</td><td></td><td>\u4e8c</td><td></td><td></td><td>25.44M</td><td>279.7G</td></tr></table></body></html>  \n"
  },
  {
    "type": "blank_line"
  },
  {
    "type": "list",
    "children": [
      {
        "type": "list_item",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "raw": "RESIDE-6K: Models are trained and tested on the mixed dataset. We use an experimental setup from DA "
              },
              {
                "type": "text",
                "raw": "["
              },
              {
                "type": "text",
                "raw": "18], which differs significantly from the RESIDE-Full. Its training set contains 3,000 ITS image pairs and 3,000 OTS image pairs, and all images are resized to $400\\times400$ . Its testing set mixes indoor and outdoor image pairs to form a test set of 1,000 image pairs without resizing, here called SOTS-mix. In this experimental setup, we retrain all models using $L_{1}$ loss on the RESIDE-6K training set for 1,000 epochs, and the learning rate is adjusted according to the model\u2019s mini-batch size. For some methods that estimate $t(x)$ , we adapt them to predict the output image. Thus we can compare the architectures\u2019 performance, regardless of the impact of the training strategy. 3) RS-Haze: Models are trained on the RS-Haze-mix. For the default experimental setup, we use 8-bit gamma-corrected RGB images for training and testing. We train all models using $L_{1}$ loss for 150 epochs, and other settings are the same as RESIDE-6K. For MS image dehazing, we use 16-bit linear images for training and testing. It aims to analyze the properties of MS and RGB images for image dehazing. Note that we compute PSNR and SSIM on the gamma-corrected RGB images when testing."
              }
            ]
          }
        ]
      },
      {
        "type": "list_item",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "raw": "Overhead: We use the number of parameters (#Param) and multiply-accumulate operations (MACs) to measure the overhead. MACs are measured on $256\\times256$ images."
              }
            ]
          }
        ]
      }
    ],
    "tight": false,
    "bullet": ")",
    "attrs": {
      "depth": 0,
      "ordered": true,
      "start": 2
    }
  },
  {
    "type": "heading",
    "attrs": {
      "level": 3
    },
    "style": "atx",
    "children": [
      {
        "type": "text",
        "raw": "B. Quantitative Comparison"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "We quantitatively compare the performance of DehazeFormers and baselines, and the results are shown in TABLE IV. Here we underline the best results in baselines and bold the results where DehazeFormers exceed them. Overall, our proposed DehazeFormers outperformed these baselines. We argue that the RESIDE-Full indoor set mainly measures the model\u2019s capability to handle high-frequency information, and the outdoor set mainly measures the convergence speed of the model. RESIDE-6K measures the stability of the model and the capability to extract low-frequency information. RSHaze measures the network\u2019s capability to extract semantic features. Notably, DehazeFormer-B sometimes outperforms DehazeFormer-M, indicating that the attention mechanism is more critical than convolution in these experimental setups."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "list",
    "children": [
      {
        "type": "list_item",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "raw": "RESIDE-Full: Training on ITS and testing on SOTS indoor set should be the most widely used experimental setup. Comparing the baseline methods, FFA-Net and AECR-Net are far superior to the previous or contemporaneous methods. The former mainly relies on the large network, and the latter may also benefit from the proposed contrastive loss function. However, our proposed DehazeFormer-B surpasses all baseline methods in terms of PSNR and SSIM. Further, the PSNR of DehazeFormer-L exceeds $40\\mathrm{dB}$ . To the best of our knowledge, this is the first method with the PSNR exceeding 40 dB on the SOTS indoor set, dramatically surpassing previous work. Finally, all variants of DehazeFormer work well, and we believe it is a scalable method. Unfortunately, some baselines do not report results on SOTS outdoor set. Because the training set of outdoor scenes consists of more than 300,000 sample pairs, DehazeFormers and baselines may not have converged. We believe that there is still much scope to improve the performance on SOTS outdoor set, and the current results reflect more the network\u2019s convergence speed. In particular, DehazeFormer-M is inferior to DehazeFormer-S on the outdoor set, probably because more nonlinear activation functions slow down the training. We remind that the results of baselines on RESIDE-Full are replicated from previous works, and some of them can achieve higher performance using our codebase."
              }
            ]
          }
        ]
      },
      {
        "type": "list_item",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "raw": "RESIDE-6K: We found that the performance of all CNN-based networks under the RESIDE-6K experimental setup is worse than that of DehazeFormers, which we suppose is due to the different image resolutions of the testing and training sets. Because the images of the training set are resized, its high-frequency information distribution is not consistent with the images of the testing set. As we argued, the convolutional layer is good at filtering high-frequency information, while the attention mechanism is good at filtering low-frequency information, making DehazeFormers perform better. We believe this property of the attention mechanism is important for image dehazing because it is not practical to collect dehazing datasets for each resolution setting."
              }
            ]
          }
        ]
      }
    ],
    "tight": false,
    "bullet": ")",
    "attrs": {
      "depth": 0,
      "ordered": true
    }
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "TABLE V PSNR / SSIM OF DEHAZEFORMER-S ON THE RGB / MS SET."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "block_html",
    "raw": "<html><body><table><tr><td>Setting</td><td>RS-Haze-L</td><td>RS-Haze-M</td><td>RS-Haze-D</td><td>RS-Haze-mix</td></tr><tr><td>RGB</td><td>43.68/0.993</td><td>39.58/0.979</td><td>35.46/0.938</td><td>39.57/0.970</td></tr><tr><td>MS</td><td>55.44/0.999</td><td>50.75/0.997</td><td>43.66/0.984</td><td>49.95/0.993</td></tr></table></body></html>  \n"
  },
  {
    "type": "blank_line"
  },
  {
    "type": "list",
    "children": [
      {
        "type": "list_item",
        "children": [
          {
            "type": "block_text",
            "children": [
              {
                "type": "text",
                "raw": "RS-Haze: Compared with other experimental setups, the methods have higher PSNR on RS-Haze but lower SSIM. The scenes of remote sensing images are more monotonous than natural scenes. Thus, it is easier for methods to estimate images\u2019 latent color and brightness, making the PSNR higher. In contrast, the haze of RS-Haze is highly non-homogeneous, making the high-frequency information of the image corrupted and the SSIM accordingly lower. We compare the image dehazing methods on RS-Haze. It can be seen that FFANet is the best method in baselines, while our small model surpasses it. It is not only due to the excellent design of DehazeFormer itself but also because the remote sensing images have more similar regions, which are more favorable for selfattention "
              },
              {
                "type": "text",
                "raw": "["
              },
              {
                "type": "text",
                "raw": "81]. Furthermore, the comparison of DehazeFormerS on RGB and MS images is shown in TABLE V. As expected, dense haze is more difficult to be removed than light haze. Besides, the additional information provided by more channels and larger bit depths does improve the performance of the method substantially."
              }
            ]
          }
        ]
      }
    ],
    "tight": true,
    "bullet": ")",
    "attrs": {
      "depth": 0,
      "ordered": true,
      "start": 3
    }
  },
  {
    "type": "heading",
    "attrs": {
      "level": 3
    },
    "style": "atx",
    "children": [
      {
        "type": "text",
        "raw": "C. Qualitative Comparison"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "We also select some samples of the results to analyze the performance of each method qualitatively. Since we do not retrain the baselines on RESIDE-Full, we only show the test results on RESIDE-6K and RS-Haze. Fig. 7 and Fig. 8 illustrate qualitative comparisons of our DehazeFormer-S with some representative learning-based dehazing methods."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "list",
    "children": [
      {
        "type": "list_item",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "raw": "RESIDE-6K: We select four samples taken from different scenes in the SOTS mix set to evaluate the network\u2019s dehazing performance, including synthetic indoor and outdoor haze. AOD-Net and GCANet produce severe color distortions, which make their indoor and outdoor results too dim or too bright. Though color is restored in most areas of images dehazed by PFDN and FFA-Net, color distortion remains on distant objects and small objects near the edge of images. By comparison, the color is recovered correctly through the haze by our DehazeFormer-S, and the results look natural and realistic. When it comes to the region where haze density varies significantly in some indoor scenes, as shown in the enlarged white boxes in the second row in Fig. 7, we can observe that almost all the comparative methods fail to remove the haze effectively. However, our DehazeFormer-S restores clear images well, keeps texture and color information, and contains the least haze residual."
              }
            ]
          }
        ]
      },
      {
        "type": "list_item",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "raw": "RS-Haze: Three images taken from different scenes with different haze densities in the RS-Haze are selected to evaluate the network\u2019s dehazing performance on non-homogeneous haze. AOD-Net can barely handle non-homogeneous haze and produces severe artifacts. GCANet, PFDN, and FFANet can remove haze effectively when the haze is thin, as shown in the first two rows in Fig. 8, but they are not as good as DehazeFormer-S in color and detail reproduction. Moreover, DehazeFormer-S can remove dense haze, while all other networks produce apparent artifacts. See the water surface area in the third row of Fig. 8."
              }
            ]
          }
        ]
      }
    ],
    "tight": false,
    "bullet": ")",
    "attrs": {
      "depth": 0,
      "ordered": true
    }
  },
  {
    "type": "heading",
    "attrs": {
      "level": 3
    },
    "style": "atx",
    "children": [
      {
        "type": "text",
        "raw": "D. Ablation Study"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "We perform ablation studies on the RESIDE-Full\u2019s indoor scene. However, because not every DehazeFormer block has an MHSA, these blocks degenerate into meaningless linear layers when removing the parallel convolution. So we build DehazeFormer-A for ablation studies only. In particular, we set the attention ratio of DehazeFormer-A to 1 and reduce the depth of the network to keep the computational cost and parameters. TABLE VI lists the difference between DehazeFormer-T and DehazeFormer-A. We can see that DehazeFormer-T has better performance than DehazeFormer-A. In terms of overhead, DehazeFormer-A has fewer parameters but a higher computational cost compared to DehazeFormer-T. Note that we find that the results of ablation studies on different datasets are not always consistent, e.g., RESIDE-6K prefers DehazeFormer with a high attention ratio compared to the RESIDE-Full indoor set. We mark the results in red if there is an improvement compared to the baseline (DehazeFormer-A) and in blue if there is a degradation."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "list",
    "children": [
      {
        "type": "list_item",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "raw": "Normalization layer: We study normalization layers and their placements on the performance, and the results are shown in TABLE VII. We can see that avoiding the loss of inter-patch relativity and reintroducing the lost statistics does improve the networks\u2019 performance. Besides, the normalization layer is more critical for MHSA than MLP. Considering that the normalization layer before MLP has no significant impact on the performance, removing it makes sense since it is not cheap to obtain the standard deviation of the feature maps. However, the negative impact of LayerNorm is not as evident as expected since the normalization layer showed a severe impact on performance in our early ablation studies on RESIDE-6K. Thus we plan to explore the relationship between the dataset and the normalization layer in our future work."
              }
            ]
          }
        ]
      },
      {
        "type": "list_item",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "raw": "Shifted window partitioning scheme: We study the schemes of shifted window partitioning, and the results are shown in TABLE VIII. Because masked padding and masked cyclic shift are equivalent in terms of spatial information aggregation, we train only a single network. If we replace the reflection padding with zero padding, the network\u2019s performance drops significantly. Zero-padding introduces meaningless tokens, and the attention matrix is all-positive, making useless information mixed in. In contrast, cyclic shift without mask also introduces unreasonable interactions between tokens but has a less negative impact. Finally, our proposed scheme gives a moderate performance improvement to the network. Considering that it only introduces a negligible additional computational cost on $256\\times256$ images, it is worthwhile."
              }
            ]
          }
        ]
      }
    ],
    "tight": false,
    "bullet": ")",
    "attrs": {
      "depth": 0,
      "ordered": true
    }
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "image",
        "children": [
          {
            "type": "text",
            "raw": ""
          }
        ],
        "attrs": {
          "url": "images/04fb62576c074c53b0259f0492bff5131285846e221578c66c5a2c0108fedaa9.jpg"
        }
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "Fig. 7. Qualitative comparison of image dehazing methods on SOTS mix set, where the first two rows are indoor images, and the last two rows are the outdoor images. The first column is the hazy images and the last column is the corresponding ground truth."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "image",
        "children": [
          {
            "type": "text",
            "raw": ""
          }
        ],
        "attrs": {
          "url": "images/ee089cc0bf5c7faedd7d7525a95a921265c2c825cdf44f5ae28cfcdbeabb85e6.jpg"
        }
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "Fig. 8. Qualitative comparison of image dehazing methods on RS-Haze. The first column is the hazy images and the last column is the ground truth."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "list",
    "children": [
      {
        "type": "list_item",
        "children": [
          {
            "type": "block_text",
            "children": [
              {
                "type": "text",
                "raw": "Nonlinear activation functions: We study the difference in the nonlinear activation functions, and the results are shown in TABLE IX. We replace all nonlinear activation functions in the network, including the nonlinear activation functions in MLP and SK fusion layer. Surprisingly, the nonlinear activation functions dramatically affect the network performance, while our early ablation studies on RESIDE-6K did not show such a huge gap. The networks using ReLU and LeakyReLU perform about the same because they are both piecewise linear functions that can be easily inverted. Although the form of SoftReLU is simple, it is not easily inverted, so the networks with it yield significant performance degradation. Furthermore, GELU is non-monotonic, and it is more difficult to be inverted, making the networks with it perform very poorly. We argue that it is essential to consider the invertibility of the nonlinear activation function when building the network."
              }
            ]
          }
        ]
      }
    ],
    "tight": true,
    "bullet": ")",
    "attrs": {
      "depth": 0,
      "ordered": true,
      "start": 3
    }
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "TABLE VII ABLATION STUDY ON NORMALIZATION LAYERS."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "block_html",
    "raw": "<html><body><table><tr><td></td><td>Num. of Blocks</td><td>MLP Ratio</td><td>Attention Ratio</td><td>Num. of Heads</td><td>PSNR</td><td>SSIM</td><td>#Param</td><td>MACs</td></tr><tr><td>DehazeFormer-T</td><td>[4, 4, 4, 2, 2]</td><td>[2, 4, 4, 2, 2] </td><td>[1/4, 1/2, 3/4, 0, 0]</td><td>[2, 4, 6, 1, 1] </td><td>35.15</td><td>0.989</td><td>0.686M</td><td>6.658G</td></tr><tr><td>DehazeFormer-A</td><td>[2, 2, 2, 2, 2]</td><td>[2, 4, 4, 4, 2]</td><td>[1\uff0c1\uff0c1,1,1]</td><td>[2, 4, 6, 4, 2]</td><td>34.85</td><td>0.988</td><td>0.671M</td><td>7.185G</td></tr></table></body></html>  \n"
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "TABLE VI COMPARISON BETWEEN DEHAZEFORMER-T AND DEHAZEFORMER-A."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "block_html",
    "raw": "<html><body><table><tr><td>Setting</td><td>PSNR</td><td>SSIM</td><td>#Param</td><td>MACs</td></tr><tr><td>DehazeFormer-A</td><td>34.85</td><td>0.988</td><td>0.671M</td><td>7.185G</td></tr><tr><td>ReLU \u2192 GELU</td><td>33.02</td><td>0.983</td><td>0.671M</td><td>7.279G</td></tr><tr><td>\u2192 SoftReLU (0.1)</td><td>33.73</td><td>0.985</td><td>0.671M</td><td>7.229G</td></tr><tr><td>\u2192 LeakyReLU (0.1)</td><td>34.89</td><td>0.988</td><td>0.671M</td><td>7.229G</td></tr></table></body></html>  \n"
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "TABLE VIII ABLATION STUDY ON SHIFTED WINDOW PARTITIONING SCHEMES."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "block_html",
    "raw": "<html><body><table><tr><td>Setting</td><td>PSNR</td><td>SSIM</td><td>#Param</td><td>MACs</td></tr><tr><td>DehazeFormer-A</td><td>34.85</td><td>0.988</td><td>0.671M</td><td>7.185G</td></tr><tr><td>RescaleNorm \u2192\u2192 LayerNormt</td><td>34.73</td><td>0.988</td><td>0.668M</td><td>7.175G</td></tr><tr><td>\u2192 LayerNorm</td><td>34.45</td><td>0.987</td><td>0.668M</td><td>7.175G</td></tr><tr><td>-PreNorm for MHSA</td><td>34.17</td><td>0.986</td><td>0.668M</td><td>7.163G</td></tr><tr><td>+ PreNorm for MLP</td><td>34.86</td><td>0.987</td><td>0.674M</td><td>7.207G</td></tr></table></body></html>  \n"
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "TABLE IX ABLATION STUDY ON NONLINEAR ACTIVATION FUNCTIONS."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "block_html",
    "raw": "<html><body><table><tr><td>Setting</td><td>PSNR</td><td>SSIM</td><td>#Param</td><td>MACs</td></tr><tr><td>DehazeFormer-A</td><td>34.85</td><td>0.988</td><td>0.671M</td><td>7.185G</td></tr><tr><td>- Parallel DWConv</td><td>32.90</td><td>0.983</td><td>0.653M</td><td>6.910G</td></tr><tr><td>\u2192Parallel DwConv onX</td><td>33.99</td><td>0.987</td><td>0.671M</td><td>7.185G</td></tr><tr><td>\u2192 DWConv before MLP</td><td>33.49</td><td>0.986</td><td>0.671M</td><td>7.185G</td></tr></table></body></html>  \n"
  },
  {
    "type": "blank_line"
  },
  {
    "type": "block_html",
    "raw": "<html><body><table><tr><td>Setting</td><td>PSNR</td><td>SSIM</td><td>#Param</td><td>MACs</td></tr><tr><td>DehazeFormer-A</td><td>34.85</td><td>0.988</td><td>0.671M</td><td>7.185G</td></tr><tr><td>\u2192 Zero-Padding</td><td>34.00</td><td>0.986</td><td>0.671M</td><td>7.185G</td></tr><tr><td>\u2192 Padding w/ Mask</td><td>34.54</td><td>0.988</td><td>0.671M</td><td>7.185G</td></tr><tr><td>\u2192 Cyclic Shift w/ Mask</td><td>34.54</td><td>0.988</td><td>0.671M</td><td>7.106G</td></tr><tr><td>\u2192 Cyclic Shift w/o Mask</td><td>34.34</td><td>0.988</td><td>0.671M</td><td>7.106G</td></tr></table></body></html>  \n"
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "TABLE XABLATION STUDY ON PARALLEL CONV LAYERS."
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "TABLE XI ABLATION STUDY ON OTHER COMPONENTS."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "block_html",
    "raw": "<html><body><table><tr><td>Setting</td><td>PSNR</td><td>SSIM</td><td>#Param</td><td>MACs</td></tr><tr><td>DehazeFormer-A</td><td>34.85</td><td>0.988</td><td>0.671M</td><td>7.185G</td></tr><tr><td>Soft Recon. \u2192 Recon.</td><td>34.50</td><td>0.987</td><td>0.671M</td><td>7.171G</td></tr><tr><td>SK Fusion \u2192 Cat Fusion</td><td>34.78</td><td>0.988</td><td>0.673M</td><td>7.256G</td></tr></table></body></html>  \n"
  },
  {
    "type": "blank_line"
  },
  {
    "type": "list",
    "children": [
      {
        "type": "list_item",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "raw": "Parallel conv: We study to prove the importance of parallel convolution with attention: a) remove the parallel convolution; b) place the convolution parallel with the MHSA, i.e., the input to the convolution is $X$ instead of $V$ ; c) place the convolution before the MLP "
              },
              {
                "type": "text",
                "raw": "["
              },
              {
                "type": "text",
                "raw": "69], and the results are shown in TABLE X. As can be seen, additional convolutional layers in the Transformer block can dramatically improve the network\u2019s performance, but their placement is critical. Inserting DWConv into the FFN brings only minor performance, although the scheme has been widely employed in previous work. We consider that the transformer works somehow because it separates intra-token and inter-tokens interactions into two steps, while inserting DWConv in FFN would break this property. DWConv in parallel with attention is better than DWConv in parallel with MHSA. Although both schemes use DWConv to aggregate spatial information, the former is done in the same feature space as attention, while the latter is done in a different feature space. DWConv provides static learnable aggregation weights, while attention provides dynamic allpositive aggregation weights. Thus the convolution parallel to attention does play a complementary role with attention."
              }
            ]
          }
        ]
      },
      {
        "type": "list_item",
        "children": [
          {
            "type": "paragraph",
            "children": [
              {
                "type": "text",
                "raw": "Other components: We verify the impact of the soft reconstruction module and SK fusion module on the network\u2019s performance. Although SK fusion brings only a minor performance gain, we consider it a good alternative to concatenation fusion, given its lower overhead. Whereas the soft reconstruction brings more improvement than expected, we believe introducing soft constraints on prior is beneficial."
              }
            ]
          }
        ]
      }
    ],
    "tight": false,
    "bullet": ")",
    "attrs": {
      "depth": 0,
      "ordered": true,
      "start": 4
    }
  },
  {
    "type": "heading",
    "attrs": {
      "level": 2
    },
    "style": "atx",
    "children": [
      {
        "type": "text",
        "raw": "VI. CONCLUSION"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "This paper introduces various improvements for Swin Transformer applied to image dehazing, and the proposed DehazeFormer achieves superior performance on several datasets. To summarize, we propose to use RescaleNorm and ReLU to replace the commonly used LayerNorm and GELU to avoid some negative effects that are not important for high-level vision tasks but critical for low-level vision tasks. To improve the capability of MHSA, we propose a shifted window partitioning scheme based on reflection padding and a spatial information aggregation scheme using convolution in parallel with attention. We also propose some minor improvements that are applicable to other networks. Finally, we collect a largescale remote sensing image dehazing dataset to evaluate the network\u2019s capability to remove highly non-homogeneous haze, and DehazeFormer also achieves an impressive performance. In the future, we plan to work on more lightweight and more straightforward architectures and extend the architecture to other low-level vision tasks. Besides, encoding feature maps on thumbnails and then decoding them on the original image may achieve real-time 4K image dehazing."
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "heading",
    "attrs": {
      "level": 1
    },
    "style": "atx",
    "children": [
      {
        "type": "text",
        "raw": "REFERENCES"
      }
    ]
  },
  {
    "type": "blank_line"
  },
  {
    "type": "paragraph",
    "children": [
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "1] Earl J McCartney. Optics of the atmosphere: scattering by molecules and particles. New York, 1976. 1, 6"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "2] Shree K Nayar and Srinivasa G Narasimhan. Vision in bad weather. In ICCV, volume 2, pages 820\u2013827. IEEE, 1999. 6 "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "3] Srinivasa G Narasimhan and Shree K Nayar. Vision and the atmosphere. IJCV, 48(3):233\u2013254, 2002. 1 "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "4] Kaiming He, Jian Sun, and Xiaoou Tang. Single image haze removal using dark channel prior. IEEE TPAMI, 33(12):2341\u2013 2353, 2010. 1, 2, 8"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "5] Raanan Fattal. Dehazing using color-lines. ACM TOG, 34(1):1\u2013 14, 2014. 2 "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "6] Qingsong Zhu, Jiaming Mai, and Ling Shao. A fast single image haze removal algorithm using color attenuation prior. IEEE TIP, 24(11):3522\u20133533, 2015. 2 "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "7] Dana Berman, Shai Avidan, et al. Non-local image dehazing. In CVPR, pages 1674\u20131682, 2016. 1, 2 "
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "8] Bolun Cai, Xiangmin Xu, Kui Jia, Chunmei Qing, and Dacheng Tao. Dehazenet: An end-to-end system for single image haze removal. IEEE TIP, 25(11):5187\u20135198, 2016. 1, 2, 8"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "9] Wenqi Ren, Si Liu, Hua Zhang, Jinshan Pan, Xiaochun Cao, and Ming-Hsuan Yang. Single image dehazing via multi-scale convolutional neural networks. In ECCV, pages 154\u2013169, 2016. 2, 8"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "10] He Zhang and Vishal M Patel. Densely connected pyramid dehazing network. In CVPR, pages 3194\u20133203, 2018. 1, 2"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "11] Boyi Li, Xiulian Peng, Zhangyang Wang, Jizheng Xu, and Dan Feng. Aod-net: All-in-one dehazing network. In ICCV, pages 4770\u20134778, 2017. 2, 8"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "12] Wenqi Ren, Lin Ma, Jiawei Zhang, Jinshan Pan, Xiaochun Cao, Wei Liu, and Ming-Hsuan Yang. Gated fusion network for single image dehazing. In CVPR, pages 3253\u20133261, 2018. 2, 8"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "13] Xiaohong Liu, Yongrui Ma, Zhihao Shi, and Jun Chen. Griddehazenet: Attention-based multi-scale network for image dehazing. In ICCV, pages 7314\u20137323, 2019. 1, 2, 8"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "14] Dongdong Chen, Mingming He, Qingnan Fan, Jing Liao, Liheng Zhang, Dongdong Hou, Lu Yuan, and Gang Hua. Gated context aggregation network for image dehazing and deraining. In WACV, pages 1375\u20131383, 2019. 2, 8"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "15] Jiangxin Dong and Jinshan Pan. Physics-based feature dehazing networks. In ECCV, pages 188\u2013204. Springer, 2020. 8"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "16] Qili Deng, Ziling Huang, Chung-Chi Tsai, and Chia-Wen Lin. Hardgan: A haze-aware representation distillation gan for single image dehazing. In ECCV, pages 722\u2013738. Springer, 2020."
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "17] Hang Dong, Jinshan Pan, Lei Xiang, Zhe Hu, Xinyi Zhang, Fei Wang, and Ming-Hsuan Yang. Multi-scale boosted dehazing network with dense feature fusion. In CVPR, pages 2157\u20132167, 2020. 8"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "18] Xu Qin, Zhilin Wang, Yuanchao Bai, Xiaodong Xie, and Huizhu Jia. Ffa-net: Feature fusion attention network for single image dehazing. In AAAI, pages 11908\u201311915, 2020. 2, 7, 8"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "19] Haiyan Wu, Yanyun Qu, Shaohui Lin, Jian Zhou, Ruizhi Qiao, Zhizhong Zhang, Yuan Xie, and Lizhuang Ma. Contrastive learning for compact single image dehazing. In CVPR, pages 10551\u201310560, 2021. 2, 8"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "20] Chao Wang, Hao-Zhen Shen, Fan Fan, Ming-Wen Shao, ChuanSheng Yang, Jian-Cheng Luo, and Liang-Jian Deng. Eaa-net: A novel edge assisted attention network for single image dehazing. KBS, 228:107279, 2021. 1, 2"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "21] Yuanjie Shao, Lerenhan Li, Wenqi Ren, Changxin Gao, and Nong Sang. Domain adaptation for image dehazing. In CPVR, pages 2808\u20132817, 2020. 1"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "22] Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, \u0141ukasz Kaiser, and Illia Polosukhin. Attention is all you need. In NeurIPS, volume 30, 2017. 1, 2"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "23] Wenhai Wang, Enze Xie, Xiang Li, Deng-Ping Fan, Kaitao Song, Ding Liang, Tong Lu, Ping Luo, and Ling Shao. Pyramid vision transformer: A versatile backbone for dense prediction without convolutions. In ICCV, pages 568\u2013578, 2021. 1, 2"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "24] Li Yuan, Yunpeng Chen, Tao Wang, Weihao Yu, Yujun Shi, ZiHang Jiang, Francis EH Tay, Jiashi Feng, and Shuicheng Yan. Tokens-to-token vit: Training vision transformers from scratch on imagenet. In ICCV, pages 558\u2013567, 2021. 2"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "25] Krzysztof Choromanski, Valerii Likhosherstov, David Dohan, Xingyou Song, Andreea Gane, Tamas Sarlos, Peter Hawkins, Jared Davis, Afroz Mohiuddin, Lukasz Kaiser, et al. Rethinking attention with performers. In ICLR, 2021. 3"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "26] Tete Xiao, Piotr Dollar, Mannat Singh, Eric Mintun, Trevor Darrell, and Ross Girshick. Early convolutions help transformers see better. In NeurIPS, volume 34, 2021. 3"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "27] Zihang Dai, Hanxiao Liu, Quoc Le, and Mingxing Tan. Coatnet: Marrying convolution and attention for all data sizes. In NeurIPS, volume 34, 2021."
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "28] Kunchang Li, Yali Wang, Peng Gao, Guanglu Song, Yu Liu, Hongsheng Li, and Yu Qiao. Uniformer: Unified transformer for efficient spatiotemporal representation learning. In ICLR, 2022."
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "29] Namuk Park and Songkuk Kim. How do vision transformers work? In ICLR, 2022. 2, 3, 5"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "30] Ze Liu, Yutong Lin, Yue Cao, Han Hu, Yixuan Wei, Zheng Zhang, Stephen Lin, and Baining Guo. Swin transformer: Hierarchical vision transformer using shifted windows. In ICCV, pages 10012\u201310022, 2021. 1, 3"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "31] Zilong Huang, Youcheng Ben, Guozhong Luo, Pei Cheng, Gang Yu, and Bin Fu. Shuffle transformer: Rethinking spatial shuffle for vision transformer. arXiv preprint arXiv:2106.03650, 2021."
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "32] Qihang Yu, Yingda Xia, Yutong Bai, Yongyi Lu, Alan L Yuille, and Wei Shen. Glance-and-gaze vision transformer. In NeurIPS, volume 34, 2021."
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "33] Wenxiao Wang, Lu Yao, Long Chen, Binbin Lin, Deng Cai, Xiaofei He, and Wei Liu. Crossformer: A versatile vision transformer hinging on cross-scale attention. In ICLR, 2022."
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "34] Hezheng Lin, Xing Cheng, Xiangyu Wu, Fan Yang, Dong Shen, Zhongyuan Wang, Qing Song, and Wei Yuan. Cat: Cross attention in vision transformer. arXiv preprint arXiv:2106.05786, 2021. 3"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "35] Chun-Fu Chen, Rameswar Panda, and Quanfu Fan. Regionvit: Regional-to-local attention for vision transformers. arXiv preprint arXiv:2106.02689, 2021. 3"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "36] Chun-Fu Richard Chen, Quanfu Fan, and Rameswar Panda. Crossvit: Cross-attention multi-scale vision transformer for image classification. In ICCV, pages 357\u2013366, 2021."
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "37] Xiangxiang Chu, Zhi Tian, Yuqing Wang, Bo Zhang, Haibing Ren, Xiaolin Wei, Huaxia Xia, and Chunhua Shen. Twins: Revisiting the design of spatial attention in vision transformers. In NeurIPS, volume 34, 2021. 3"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "38] Xiaoyi Dong, Jianmin Bao, Dongdong Chen, Weiming Zhang, Nenghai Yu, Lu Yuan, Dong Chen, and Baining Guo. Cswin transformer: A general vision transformer backbone with crossshaped windows. In CVPR, 2022. 3, 5"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "39] Sitong Wu, Tianyi Wu, Haoru Tan, and Guodong Guo. Pale transformer: A general vision transformer backbone with paleshaped attention. arXiv preprint arXiv:2112.14000, 2021."
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "40] Jianwei Yang, Chunyuan Li, Pengchuan Zhang, Xiyang Dai, Bin Xiao, Lu Yuan, and Jianfeng Gao. Focal attention for long-range interactions in vision transformers. In NeurIPS, volume 34, 2021. 1, 3"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "41] Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. Layer normalization. arXiv preprint arXiv:1607.06450, 2016. 2, 4"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "42] Dan Hendrycks and Kevin Gimpel. Gaussian error linear units (gelus). arXiv preprint arXiv:1606.08415, 2016. 2"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "43] Prajit Ramachandran, Barret Zoph, and Quoc V Le. Searching for activation functions. arXiv preprint arXiv:1710.05941, 2017. 2, 4"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "44] Vinod Nair and Geoffrey E Hinton. Rectified linear units improve restricted boltzmann machines. In ICML, 2010. 2, 4"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "45] Xiang Li, Wenhai Wang, Xiaolin Hu, and Jian Yang. Selective kernel networks. In CVPR, pages 510\u2013519, 2019. 2, 3"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "46] Codruta O Ancuti, Cosmin Ancuti, and Radu Timofte. Nhhaze: An image dehazing benchmark with non-homogeneous hazy and haze-free images. In CVPR Workshop, pages 444\u2013 445, 2020. 2, 6"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "47] Cosmin Ancuti, Codruta O Ancuti, Radu Timofte, and Christophe De Vleeschouwer. I-haze: a dehazing benchmark with real hazy and haze-free indoor images. In ACIVS, pages 620\u2013631. Springer, 2018."
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "48] Codruta O Ancuti, Cosmin Ancuti, Radu Timofte, and Christophe De Vleeschouwer. O-haze: a dehazing benchmark with real hazy and haze-free outdoor images. In ICCV Workshop, pages 754\u2013762, 2018."
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "49] Codruta O Ancuti, Cosmin Ancuti, Mateu Sbert, and Radu Timofte. Dense-haze: A benchmark for image dehazing with dense-haze and haze-free images. In ICIP, pages 1014\u20131018. IEEE, 2019. 2"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "50] Cosmin Ancuti, Codruta O Ancuti, and Christophe De Vleeschouwer. D-hazy: A dataset to evaluate quantitatively dehazing algorithms. In ICIP, pages 2226\u20132230. IEEE, 2016."
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "51] Yanfu Zhang, Li Ding, and Gaurav Sharma. Hazerd: an outdoor scene dataset and benchmark for single image dehazing. In ICIP, pages 3205\u20133209, 2017."
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "52] Boyi Li, Wenqi Ren, Dengpan Fu, Dacheng Tao, Dan Feng, Wenjun Zeng, and Zhangyang Wang. Benchmarking singleimage dehazing and beyond. IEEE TIP, 28(1):492\u2013505, 2018."
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "53] Manjun Qin, Fengying Xie, Wei Li, Zhenwei Shi, and Haopeng Zhang. Dehazing for multispectral remote sensing images based on a convolutional neural network with the residual architecture. IEEE J-STARS, 11(5):1645\u20131655, 2018. 2"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "54] Jianhua Guo, Jingyu Yang, Huanjing Yue, Hai Tan, Chunping Hou, and Kun Li. Rsdehazenet: Dehazing network with channel refinement for multispectral remote sensing images. IEEE TGRS, 59(3):2535\u20132549, 2020. 6"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "55] Binghui Huang, Li Zhi, Chao Yang, Fuchun Sun, and Yixu Song. Single satellite optical imagery dehazing using sar image prior based on conditional generative adversarial networks. In WACV, pages 1806\u20131813, 2020. 6, 7"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "56] Aditya Mehta, Harsh Sinha, Murari Mandal, and Pratik Narang. Domain-aware unsupervised hyperspectral reconstruction for aerial image dehazing. In WACV, pages 413\u2013422, 2021. 2, 6"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "57] Alexey Dosovitskiy, Lucas Beyer, Alexander Kolesnikov, Dirk Weissenborn, Xiaohua Zhai, Thomas Unterthiner, Mostafa Dehghani, Matthias Minderer, Georg Heigold, Sylvain Gelly, et al. An image is worth 16x16 words: Transformers for image recognition at scale. In ICLR, 2021. 2"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "58] Olaf Ronneberger, Philipp Fischer, and Thomas Brox. U-net: Convolutional networks for biomedical image segmentation. In MICCAI, pages 234\u2013241, 2015. 3"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "59] Jingyun Liang, Jiezhang Cao, Guolei Sun, Kai Zhang, Luc Van Gool, and Radu Timofte. Swinir: Image restoration using swin transformer. In ICCV Workshop, pages 1833\u20131844, 2021. 3, 4"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "60] Zhendong Wang, Xiaodong Cun, Jianmin Bao, and Jianzhuang Liu. Uformer: A general u-shaped transformer for image restoration. In CVPR, 2022. 3, 4"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "61] Fran\u00b8cois Chollet. Xception: Deep learning with depthwise separable convolutions. In CVPR, pages 1251\u20131258, 2017. 3"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "62] Yawei Li, Kai Zhang, Jiezhang Cao, Radu Timofte, and Luc Van Gool. Localvit: Bringing locality to vision transformers. arXiv preprint arXiv:2104.05707, 2021. 3"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "63] Dong Zhao, Jia Li, Hongyu Li, and Long Xu. Hybrid local-global transformer for image dehazing. arXiv preprint arXiv:2109.07100, 2021. 3"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "64] Jeya Maria Jose Valanarasu, Rajeev Yasarla, and Vishal M Patel. Transweather: Transformer-based restoration of images degraded by adverse weather conditions. In CVPR, 2022. 3"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "65] Nicolas Carion, Francisco Massa, Gabriel Synnaeve, Nicolas Usunier, Alexander Kirillov, and Sergey Zagoruyko. End-to-end object detection with transformers. In ECCV, pages 213\u2013229. Springer, 2020. 3"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "66] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image recognition. In CVPR, pages 770\u2013778, 2016. 4"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "67] Sergey Ioffe and Christian Szegedy. Batch normalization: Accelerating deep network training by reducing internal covariate shift. In ICML, pages 448\u2013456, 2015. 4"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "68] Mingxing Tan and Quoc Le. Efficientnet: Rethinking model scaling for convolutional neural networks. In ICML, pages 6105\u20136114. PMLR, 2019. 4"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "69] Zhuang Liu, Hanzi Mao, Chao-Yuan Wu, Christoph Feichtenhofer, Trevor Darrell, and Saining Xie. A convnet for the 2020s. In CVPR, 2022. 4, 11"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "70] Andrew L Maas, Awni Y Hannun, Andrew Y Ng, et al. Rectifier nonlinearities improve neural network acoustic models. In ICML, 2013. 4"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "71] Md Amirul Islam, Sen Jia, and Neil DB Bruce. How much position information do convolutional neural networks encode? In ICLR, 2020. 5"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "72] Ningning Ma, Xiangyu Zhang, Hai-Tao Zheng, and Jian Sun. Shufflenet v2: Practical guidelines for efficient cnn architecture design. In ECCV, pages 116\u2013131, 2018. 6"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "73] Priya Goyal, Piotr Dolla\u00b4r, Ross Girshick, Pieter Noordhuis, Lukasz Wesolowski, Aapo Kyrola, Andrew Tulloch, Yangqing Jia, and Kaiming He. Accurate, large minibatch sgd: Training imagenet in 1 hour. arXiv preprint arXiv:1706.02677, 2017. 6"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "74] Ilya Loshchilov and Frank Hutter. Decoupled weight decay regularization. In ICLR, 2019. 6"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "75] Ilya Loshchilov and Frank Hutter. Sgdr: Stochastic gradient descent with warm restarts. In ICLR, 2017. 6"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "76] Yufeng Li and Xiang Chen. A coarse-to-fine two-stage attentive network for haze removal of remote sensing images. IEEE GRSL, 18(10):1751\u20131755, 2020. 6"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "77] Faramarz Naderi Darbaghshahi, Mohammad Reza Mohammadi, and Mohsen Soryani. Cloud removal in remote sensing images using generative adversarial networks and sar-to-optical image translation. IEEE TGRS, 60:1\u20139, 2021. 6"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "78] Pat S Chavez Jr. An improved dark-object subtraction technique for atmospheric scattering correction of multispectral data. Remote sensing of environment, 24(3):459\u2013479, 1988. 7"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "79] T Cooley, Gail P Anderson, Gerald W Felde, Michael L Hoke, Anthony J Ratkowski, James H Chetwynd, James A Gardner, Steven M Adler-Golden, Michael W Matthew, Alexander Berk, et al. Flaash, a modtran4-based atmospheric correction algorithm, its application and validation. In IGARSS, volume 3, pages 1414\u20131418. IEEE, 2002. 7"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "80] Frank Warmerdam. The geospatial data abstraction library. In Open source approaches in spatial data handling, pages 87\u2013 104. Springer, 2008. 7"
      },
      {
        "type": "linebreak"
      },
      {
        "type": "text",
        "raw": "["
      },
      {
        "type": "text",
        "raw": "81] Yiqun Mei, Yuchen Fan, Yulun Zhang, Jiahui Yu, Yuqian Zhou, Ding Liu, Yun Fu, Thomas S Huang, and Honghui Shi. Pyramid attention networks for image restoration. arXiv preprint arXiv:2004.13824, 2020. 9"
      }
    ]
  }
]